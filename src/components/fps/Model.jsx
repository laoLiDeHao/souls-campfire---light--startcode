/*eslint-disable */

/*
This file was generated by https://github.com/pmndrs/gltfjsx and then
customized manually. It uses drei's new useAnimations hook which extracts
all actions and sets up a THREE.AnimationMixer for it so that you don't have to.
All of the assets actions, action-names and clips are available in its output. 
*/

import React, { useEffect, useState, useMemo } from "react";
import {
  useGLTF,
  useTexture,
  useCursor,
  useAnimations,
  Html,
} from "@react-three/drei";
import { useGraph } from "@react-three/fiber";
// import {  useSpring } from "@react-spring/three";
import { SkeletonUtils } from "three-stdlib";

const modelUrl="https://campsoul-light-1256331022.cos.ap-nanjing.myqcloud.com/bodys/default/stacy.glb"
const modelTextUrl="https://campsoul-light-1256331022.cos.ap-nanjing.myqcloud.com/bodys/default/stacy.jpg"
export default function Model({nickname, pose, ...props }) {
  // Fetch model and a separate texture
  const { scene, animations } = useGLTF(modelUrl);
  const texture = useTexture(modelTextUrl);
  scene.position.set(0, -100, 0);
  // Skinned meshes cannot be re-used in threejs without cloning them
  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);
  // useGraph creates two flat object collections for nodes and materials
  const { nodes } = useGraph(clone);

  // Extract animation actions
  
  const { ref, actions, names } = useAnimations(animations);

  // Hover and animation-index states
  const [hovered, setHovered] = useState(false);
  const [index, setIndex] = useState(pose);
  // Animate the selection halo
  // Change cursor on hover-state
  useCursor(hovered);

  // Change animation when the index changes
  useEffect(() => {
    // Reset and fade in animation after an index has been changed
    console.log({ animations, ref, actions, names });
    actions[names[index]]?.reset().fadeIn(0.5).play();
    // In the clean-up phase, fade it out
    return () => actions[names[index]]?.fadeOut(0.5);
  }, [index, actions, names]);
  useEffect(()=>{
    console.log("pose change",pose);
    setIndex(pose)
  },[pose])
  console.log("model,nickname",nickname);
  return (
    <group ref={ref} {...props} dispose={null}>
      <group position={[0,2,0]}>
        <Html  >
          <div className="user_name">{nickname}</div>
        </Html>
      </group>
      <group
        onPointerOver={() => setHovered(true)}
        onPointerOut={() => setHovered(false)}
        onClick={() =>{}}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[0.01, 0.01, 0.01]}
      >
        <primitive object={nodes.mixamorigHips} />
        <skinnedMesh
          castShadow
          receiveShadow
          geometry={nodes.stacy.geometry}
          skeleton={nodes.stacy.skeleton}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={[100, 100, 100]}
        >
          <meshStandardMaterial map={texture} map-flipY={false} skinning />
        </skinnedMesh>
      </group>
      {/* <a.mesh receiveShadow position={[0, 1, -1]} scale={scale}>
        <circleBufferGeometry args={[0.6, 64]} />
        <a.meshStandardMaterial color={color} />
      </a.mesh> */}
    </group>
  );
}
